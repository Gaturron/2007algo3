buscarIndices(int punto, Nodo actual, conj(int))
{
	si no llegue al final del arbol
		res <- agregar(los indices que aparecen en el nodo)
		{
		si  punto es <= actual_numero
			buscarIndices(punto, Izq(actual), conj(int))
		si  punto es >= actual_numero
			buscarIndices(punto, Der(actual), conj(int))		
		}
}





BI(n) = c + log(k_x) + 2*BI(n/2)









Como es un arbol de intervalos, una imagen no puede estar en un nodo y su "hermano", puen en ese caso deberia estar salamente en el padre.

Ahora si la imagen esta en un nodo y esta en su "primo hermano", ha quedado acotada por su harmano y su "primo no hermano", como estamos buscando que este en la mayor cantidad de nodos posible, pensaremos en el otro caso




¿En cuantos nodos de un arbol de intervalos pueda aparecer una imagen?

donde puede estar una imagen

NODO Y HERMANO: no pues no cumple con definicion
NODO Y PRIMO HERMANO: acotada entre hermano y primo "no hermano"
HODO Y PRIMO NO HERMANO: no es posible pues quedaria un agujero (primo hermano)

con estas reglas es facil ver, que la unica forma de ubicar 2 nodos con imagen en un arbol de 3 niveles (de manera que no quede acotada) es en un nodo y su tio

"la forma de ubicar las imagenes de manera maximal en un arbol de n nodos (de manera que no quede acotada) es en una diagonal"

Demostrada para el caso N=7

sup verdadero para n-1

forma(n) = forma(n/2) + forma(n/2) + "en la raiz o no" (de manera que cumpla las propiedades de arbol de intervalos y que no este acotado)


Propiedad NnIAVLNA(n) <= log(n)+1

Demo

NnIAVLNA(n) = log(n)+1

NnIAVLNA(n) = NnIAVLNA(n/2) + NnIAVLNA(n/2) + 1(si esta en la raiz)

si estubiera en la raiz no podria estar en ninguno de sus subArboles
y x HI

NnIAVLNA(n) = log(n/2)+1 + log(n/2)+1
NnIAVLNA(n) = 2*log(n/2) + 2
